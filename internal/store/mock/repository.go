// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	problem "github.com/edusalguero/roteiro.git/internal/problem"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProblem mocks base method
func (m *MockRepository) AddProblem(ctx context.Context, problem *problem.Problem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblem", ctx, problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProblem indicates an expected call of AddProblem
func (mr *MockRepositoryMockRecorder) AddProblem(ctx, problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockRepository)(nil).AddProblem), ctx, problem)
}

// SetSolution mocks base method
func (m *MockRepository) SetSolution(ctx context.Context, id problem.ID, solution *problem.Solution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSolution", ctx, id, solution)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSolution indicates an expected call of SetSolution
func (mr *MockRepositoryMockRecorder) SetSolution(ctx, id, solution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSolution", reflect.TypeOf((*MockRepository)(nil).SetSolution), ctx, id, solution)
}

// SetError mocks base method
func (m *MockRepository) SetError(ctx context.Context, id problem.ID, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetError", ctx, id, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetError indicates an expected call of SetError
func (mr *MockRepositoryMockRecorder) SetError(ctx, id, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockRepository)(nil).SetError), ctx, id, err)
}

// GetSolutionByProblemID mocks base method
func (m *MockRepository) GetSolutionByProblemID(ctx context.Context, id problem.ID) (*problem.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionByProblemID", ctx, id)
	ret0, _ := ret[0].(*problem.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionByProblemID indicates an expected call of GetSolutionByProblemID
func (mr *MockRepositoryMockRecorder) GetSolutionByProblemID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionByProblemID", reflect.TypeOf((*MockRepository)(nil).GetSolutionByProblemID), ctx, id)
}
