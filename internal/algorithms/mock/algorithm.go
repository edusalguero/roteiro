// Code generated by MockGen. DO NOT EDIT.
// Source: ./algorithm.go

// Package mock_algorithms is a generated GoMock package.
package mock_algorithms

import (
	context "context"
	model "github.com/edusalguero/roteiro.git/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAlgorithm is a mock of Algorithm interface
type MockAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockAlgorithmMockRecorder
}

// MockAlgorithmMockRecorder is the mock recorder for MockAlgorithm
type MockAlgorithmMockRecorder struct {
	mock *MockAlgorithm
}

// NewMockAlgorithm creates a new mock instance
func NewMockAlgorithm(ctrl *gomock.Controller) *MockAlgorithm {
	mock := &MockAlgorithm{ctrl: ctrl}
	mock.recorder = &MockAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlgorithm) EXPECT() *MockAlgorithmMockRecorder {
	return m.recorder
}

// Solve mocks base method
func (m *MockAlgorithm) Solve(ctx context.Context, problem model.Problem) (*model.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solve", ctx, problem)
	ret0, _ := ret[0].(*model.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solve indicates an expected call of Solve
func (mr *MockAlgorithmMockRecorder) Solve(ctx, problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solve", reflect.TypeOf((*MockAlgorithm)(nil).Solve), ctx, problem)
}
