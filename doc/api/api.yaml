openapi: 3.0.0
info:
  version: v1
  title: Roteiro API
servers:
  - url: 'http://localhost:8080/api/v1/'
paths:
  '/problem':
    post:
      summary: "Solve a problem with the given description"
      operationId: problemPost
      description: "The endpoint can solve the vehicle routing problem stated in the request body synchronously."
      tags:
        - Solver
      requestBody:
        description: The problem
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProblemRequest"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolutionResponse"
        400:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  '/problem-long':
    post:
      summary: "Queue a long running problem with the given description"
      operationId: problemPostAsync
      description: "It will trigger a long-running background task. The GET solution endpoint could be used to ping to fetch the results.
                    This is necessary for larger requests that take longer than 20 seconds.
                    When you POST to the above URL, it will return immediately with a 202 HTTP code and the problem_id"
      tags:
        - Solver
      requestBody:
        description: The problem
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProblemRequest"
      responses:
        202:
          description: "Problem queued"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemId"
        400:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  '/solution/{problem_id}':
    get:
      summary: "Get the solution for the given problem_id"
      operationId: solutionGet
      description: "It allows to recover the solution of a previously solved problem or a previously queued problem.
                    When the problem has not yet been resolved, the status code is 102 (Processing). Upon completion, the status code is 200.
                    The response that you would normally get directly from the synchronous endpoint is now in the output."
      tags:
        - Solver
      parameters:
        - name: problem_id
          in: path
          description: ID of related problem
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolutionResponse"
        409:
          description: "Processing. The problem is not solved yet"
        404:
          description: "Not found"
        400:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: "The error message"
    ProblemRequest:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/Asset"
        requests:
          type: array
          items:
            $ref: '#/components/schemas/Request'
        constraints:
          type: object
          properties:
            max_journey_time_factor:
              type: number
              format: float
    SolutionResponse:
      type: object
      properties:
        problem_id:
          type: string
          format: uuid
        metrics:
          type: object
          properties:
            num_assets:
              type: integer
              format: int32
            num_requests:
              type: integer
              format: int32
            num_unassigned:
              type: integer
              format: int32
            duration:
              type: integer
              format: int32
              description: "Duration of the complete solution in nanoseconds"
            distance:
              type: integer
              format: int32
              description: "Distance in meters"
            solved_time:
              type: integer
              format: int32
              description: "Time to solve the problem in nanoseconds"
        routes:
          type: array
          items:
            type: object
            properties:
              asset:
                $ref: '#/components/schemas/Asset'
              requests:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
              waypoints:
                type: array
                items:
                  $ref: '#/components/schemas/Waypoint'
              metrics:
                type: object
                properties:
                  requests:
                    type: integer
                    format: int32
                  duration:
                    type: integer
                    format: int32
                  distance:
                    type: integer
                    format: int32
        unassigned:
          type: array
          items:
            $ref: '#/components/schemas/Request'

    Asset:
      type: object
      properties:
        asset_id:
          type: string
        location:
          $ref: '#/components/schemas/Point'
        capacity:
          type: integer
          format: int32
    Request:
      type: object
      properties:
        requester_id:
          type: string
        load:
          type: integer
          format: int32
        pick_up:
          $ref: '#/components/schemas/Point'
        drop_off:
          $ref: '#/components/schemas/Point'
    Point:
      type: object
      properties:
        lat:
          type: number
          format: float
        lon:
          type: number
          format: float
    Waypoint:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Point'
        load:
          type: integer
          format: int32
        activities:
          type: array
          items:
            type: object
            properties:
              activity_type:
                type: string
              ref:
                type: string
    ProblemId:
      type: object
      properties:
        problem_id:
          type: string
          format: uuid
